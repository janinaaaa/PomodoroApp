@page "/"
@using System.Timers
@rendermode InteractiveServer

<PageTitle>Pomodoros</PageTitle>


<p role="status"> @Time</p>


<button class="btn-primary" @onclick="() => SetPomodoroTime(1500)"> Pomodoro</button>
<button class="btn-primary" @onclick="() => SetPomodoroTime(300)"> Kurze Pause</button>
<button class="btn-primary" @onclick="() => SetPomodoroTime(900)"> Lange Pause</button>

<br/>

<button class="btn btn-primary" @onclick="StartPomodoroTime">Start</button>
<button class="btn btn-primary" @onclick="PausePomodoroTime">Pause</button>
@code {
    private System.Timers.Timer _timer = null!;
    private int _secondsToRun = 0;

    private string Time { get; set; } = "00:00";

    [Parameter] public EventCallback TimerOut { get; set; }

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += OnTimedEvent;
        _timer.AutoReset = true;
    }

    private void SetPomodoroTime(int time)
    {
        _timer.Stop();
        this._secondsToRun = time;
        Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
        StateHasChanged();
        Console.Write(_secondsToRun);
    }



    private void StartPomodoroTime()
    {
        StateHasChanged();
        _timer.Start();
    }

    private void PausePomodoroTime()
    {
        _timer.Stop();
    }
    


    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        _secondsToRun--;

        await InvokeAsync(() =>
        {
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
        });

        if (_secondsToRun <= 0)
        {
            _timer.Stop();
            await TimerOut.InvokeAsync();
        }
    }

}